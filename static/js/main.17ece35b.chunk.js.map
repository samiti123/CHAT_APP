{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","bind","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","onNewMessage","Audio","play","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17ece35b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nimport { sendMessage, isTyping } from 'react-chat-engine';\n\nconst MessageForm = (props) => {\n  const [value, setValue] = useState('');\n  const { chatId, creds } = props;\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n\n    isTyping(props, chatId);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const text = value.trim();\n\n    if (text.length > 0) {\n      sendMessage(creds, chatId, { text });\n    }\n\n    setValue('');\n  };\n\n  const handleUpload = (event) => {\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\n  };\n\n  return (\n    <form className='message-form' onSubmit={handleSubmit}>\n      <input\n        className='message-input'\n        placeholder='Send a message...'\n        value={value}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      <label htmlFor='upload-button'>\n        <span className='image-button'>\n          <PictureOutlined className='picture-icon' />\n        </span>\n      </label>\n      <input\n        type='file'\n        multiple={false}\n        id='upload-button'\n        style={{ display: 'none' }}\n        onChange={handleUpload.bind(this)}\n      />\n      <button type='submit' className='send-button'>\n        <SendOutlined className='send-icon' />\n      </button>\n    </form>\n  );\n};\n\nexport default MessageForm;\n","const MyMessage = ({ message }) => {\n  if (message.attachments && message.attachments.length > 0) {\n    return (\n      <img\n        src={message.attachments[0].file}\n        alt='message-attachment'\n        className='message-image'\n        style={{ float: 'right' }}\n      />\n    );\n  }\n\n  return (\n    <div\n      className='message'\n      style={{\n        float: 'right',\n        marginRight: '18px',\n        color: 'white',\n        backgroundColor: '#3B2A50',\n      }}\n    >\n      {message.text}\n    </div>\n  );\n};\n\nexport default MyMessage;\n","const TheirMessage = ({ lastMessage, message }) => {\n  const isFirstMessageByUser =\n    !lastMessage || lastMessage.sender.username !== message.sender.username;\n\n  return (\n    <div className='message-row'>\n      {isFirstMessageByUser && (\n        <div\n          className='message-avatar'\n          style={{\n            backgroundImage: message.sender && `url(${message.sender.avatar})`,\n          }}\n        />\n      )}\n      {message.attachments && message.attachments.length > 0 ? (\n        <img\n          src={message.attachments[0].file}\n          alt='message-attachment'\n          className='message-image'\n          style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n        />\n      ) : (\n        <div\n          className='message'\n          style={{\n            float: 'left',\n            backgroundColor: '#CABCDC',\n            marginLeft: isFirstMessageByUser ? '4px' : '48px',\n          }}\n        >\n          {message.text}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TheirMessage;\n","import React from 'react';\nimport MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderReadReceipts = (message, isMyMessage) =>\n    chat.people.map(\n      (person, index) =>\n        person.last_read === message.id && (\n          <div\n            key={`read_${index}`}\n            className='read-receipt'\n            style={{\n              float: isMyMessage ? 'right' : 'left',\n              backgroundImage:\n                person.person.avatar && `url(${person.person.avatar})`,\n            }}\n          />\n        )\n    );\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className='message-block'>\n            {isMyMessage ? (\n              <MyMessage message={message} />\n            ) : (\n              <TheirMessage\n                message={message}\n                lastMessage={messages[lastMessageKey]}\n              />\n            )}\n          </div>\n          <div\n            className='read-receipts'\n            style={{\n              marginRight: isMyMessage ? '18px' : '0px',\n              marginLeft: isMyMessage ? '0px' : '68px',\n            }}\n          >\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className='chat-feed'>\n      <div className='chat-title-container'>\n        <div className='chat-title'>{chat?.title}</div>\n        <div className='chat-subtitle'>\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className='message-form-container'>\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;\n","import { useState } from 'react';\nimport axios from 'axios';\n\nconst projectID = '1b7801d6-8a66-4be4-a442-89219d833dfc';\n\nconst LoginForm = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const authObject = {\n      'Project-ID': projectID,\n      'User-Name': username,\n      'User-Secret': password,\n    };\n\n    try {\n      await axios.get('https://api.chatengine.io/chats', {\n        headers: authObject,\n      });\n\n      localStorage.setItem('username', username);\n      localStorage.setItem('password', password);\n\n      window.location.reload();\n      setError('');\n    } catch (err) {\n      setError('Oops, incorrect credentials.');\n    }\n  };\n\n  return (\n    <div className='wrapper'>\n      <div className='form'>\n        <h1 className='title'>Chat Application</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            type='text'\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            className='input'\n            placeholder='Username'\n            required\n          />\n          <input\n            type='password'\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className='input'\n            placeholder='Password'\n            required\n          />\n          <div align='center'>\n            <button type='submit' className='button'>\n              <span>Start chatting</span>\n            </button>\n          </div>\n        </form>\n        <h1>{error}</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import { ChatEngine } from 'react-chat-engine';\n\nimport ChatFeed from './components/ChatFeed';\nimport LoginForm from './components/LoginForm';\n\nimport './App.css';\n\nconst App = () => {\n  if (!localStorage.getItem('username')) return <LoginForm />;\n  return (\n    <ChatEngine\n      height='100vh'\n      projectID='6be35fa6-d7fe-4b29-9072-2287106f30be'\n      userName='userOne'\n      userSecret='123456'\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n      onNewMessage={() =>\n        new Audio(\n          'https://chat-engine-assets.s3.amazonaws.com/click.mp3'\n        ).play()\n      }\n    />\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}